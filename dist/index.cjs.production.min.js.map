{"version":3,"file":"index.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["// @ts-nocheck\n\nexport const enum EnumKinds\n{\n\t/**\n\t * Item was edited\n\t */\n\tDiffEdit = 'E',\n\t/**\n\t * Item is new\n\t */\n\tDiffNew = 'N',\n\t/**\n\t * Item was edited\n\t */\n\tDiffDeleted = 'D',\n\t/**\n\t * Array was modified\n\t */\n\tDiffArray = 'A',\n}\n\nconst validKinds = [EnumKinds.DiffNew, EnumKinds.DiffEdit, EnumKinds.DiffArray, EnumKinds.DiffDeleted] as const;\n\nexport type IPathKey = string | number | symbol;\nexport type IPaths = IPathKey[];\n\nexport type IDiffNode<LHS = unknown, RHS = LHS> = DiffNew<RHS> | DiffDeleted<LHS> | DiffEdit<LHS, RHS> | DiffArray<LHS, RHS>;\n\nexport type Observer<LHS, RHS = LHS> = (diff: IDiffNode<LHS, RHS>) => void;\n\nexport type PreFilterFunction = (path: any[], key: any) => boolean;\nexport interface PreFilterObject<LHS, RHS = LHS> {\n\tprefilter?(path: any[], key: any): boolean;\n\tnormalize?(currentPath: any, key: any, lhs: LHS, rhs: RHS): [ LHS, RHS ] | undefined;\n}\n\nexport type PreFilter<LHS, RHS = LHS> = PreFilterFunction | PreFilterObject<LHS, RHS>;\n\nexport type Filter<LHS, RHS = LHS> = (target: LHS, source: RHS, change: IDiffNode<LHS, RHS>) => boolean;\n\nexport abstract class Diff\n{\n\tpublic path: IPaths;\n\n\tprotected constructor(public kind: EnumKinds, path?: IPaths)\n\t{\n\t\tif (path?.length)\n\t\t{\n\t\t\tthis.path = path\n\t\t}\n\t}\n}\n\n/**\n * Item was edited\n */\nexport class DiffEdit<LHS, RHS = LHS> extends Diff\n{\n\tpublic override kind: EnumKinds.DiffEdit;\n\n\tconstructor(path: IPaths, public lhs: LHS, public rhs: RHS)\n\t{\n\t\tsuper(EnumKinds.DiffEdit, path);\n\t}\n}\n\n/**\n * Item is new\n */\nexport class DiffNew<RHS> extends Diff\n{\n\tpublic override kind: EnumKinds.DiffNew;\n\n\tconstructor(path: IPaths, public rhs: RHS)\n\t{\n\t\tsuper(EnumKinds.DiffNew, path);\n\t}\n}\n\n/**\n * Item was edited\n */\nexport class DiffDeleted<LHS> extends Diff\n{\n\tpublic override kind: EnumKinds.DiffDeleted;\n\n\tconstructor(path: IPaths, public lhs: LHS)\n\t{\n\t\tsuper(EnumKinds.DiffDeleted, path);\n\t}\n}\n\n/**\n * Array was modified\n */\nexport class DiffArray<LHS, RHS = LHS> extends Diff\n{\n\tpublic override kind: EnumKinds.DiffArray;\n\n\tconstructor(path: IPaths, public index: number, public item: IDiffNode<LHS, RHS>)\n\t{\n\t\tsuper(EnumKinds.DiffArray, path);\n\t}\n}\n\nfunction arrayRemove<T extends any[]>(arr: T, from: number)\n{\n\treturn arr.splice(from, 1);\n\n//\tconst rest = arr.slice((to || from) + 1 || arr.length);\n//\tarr.length = from < 0 ? arr.length + from : from;\n//\tarr.push.apply(arr, rest);\n//\treturn arr;\n}\n\nfunction realTypeOf(subject: unknown)\n{\n\tconst type = typeof subject;\n\tif (type !== 'object')\n\t{\n\t\treturn type;\n\t}\n\n\tif (subject === Math)\n\t{\n\t\treturn 'math';\n\t}\n\telse if (subject === null)\n\t{\n\t\treturn 'null';\n\t}\n\telse if (Array.isArray(subject))\n\t{\n\t\treturn 'array';\n\t}\n\telse if (Object.prototype.toString.call(subject) === '[object Date]')\n\t{\n\t\treturn 'date';\n\t}\n\telse if (typeof subject.toString === 'function' && /^\\/.*\\//.test(subject.toString()))\n\t{\n\t\treturn 'regexp';\n\t}\n\treturn 'object';\n}\n\n/**\n * @see http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n */\nfunction hashThisString(string: string)\n{\n\tlet hash = 0;\n\tif (string.length === 0)\n\t{ return hash; }\n\tfor (let i = 0; i < string.length; i++)\n\t{\n\t\tconst char = string.charCodeAt(i);\n\t\thash = ((hash << 5) - hash) + char;\n\t\thash = hash & hash; // Convert to 32bit integer\n\t}\n\treturn hash;\n}\n\n/**\n * Gets a hash of the given object in an array order-independent fashion\n * also object key order independent (easier since they can be alphabetized)\n */\nexport function getOrderIndependentHash(object: unknown)\n{\n\tlet accum = 0;\n\tconst type = realTypeOf(object);\n\n\tif (type === 'array')\n\t{\n\t\tobject.forEach(function (item)\n\t\t{\n\t\t\t// Addition is commutative so this is order indep\n\t\t\taccum += getOrderIndependentHash(item);\n\t\t});\n\n\t\tconst arrayString = normalizeHashDesc(type, {\n\t\t\thash: accum,\n\t\t})\n\n\t\treturn accum + hashThisString(arrayString);\n\t}\n\telse if (type === 'object')\n\t{\n\t\tfor (const key in object)\n\t\t{\n\t\t\tif (object.hasOwnProperty(key))\n\t\t\t{\n\t\t\t\tconst keyValueString = normalizeHashDesc(type, {\n\t\t\t\t\tkey,\n\t\t\t\t\thash: getOrderIndependentHash(object[key]),\n\t\t\t\t});\n\n\t\t\t\taccum += hashThisString(keyValueString);\n\t\t\t}\n\t\t}\n\n\t\treturn accum;\n\t}\n\n\t// Non object, non array...should be good?\n\tconst stringToHash = normalizeHashDesc(type, {\n\t\tvalue: object,\n\t});\n\n\treturn accum + hashThisString(stringToHash);\n}\n\nfunction normalizeHashDesc(type: ReturnType<typeof realTypeOf>, options: {\n\tvalue?: any,\n\tkey?: IPathKey,\n\thash?: number,\n})\n{\n\tswitch (type)\n\t{\n\t\tcase 'array':\n\t\t\treturn `[ type: ${type} , hash: ${options.hash}]`;\n\t\tcase 'object':\n\t\t\treturn `[ type: ${type}, key: ${options.key} , hash: ${options.hash}]`;\n\t\tdefault:\n\t\t\treturn `[ type: ${type} , value: ${options.value}]`;\n\t}\n}\n\nfunction _deepDiff(lhs, rhs, changes: IDiffNode[], prefilter, path: IPaths, key, stack, orderIndependent: boolean)\n{\n\tchanges = changes || [];\n\tpath = path || [];\n\tstack = stack || [];\n\tconst currentPath = path.slice(0);\n\tif (typeof key !== 'undefined' && key !== null)\n\t{\n\t\tif (prefilter)\n\t\t{\n\t\t\tif (typeof (prefilter) === 'function' && prefilter(currentPath, key))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (typeof (prefilter) === 'object')\n\t\t\t{\n\t\t\t\tif (prefilter.prefilter && prefilter.prefilter(currentPath, key))\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (prefilter.normalize)\n\t\t\t\t{\n\t\t\t\t\tvar alt = prefilter.normalize(currentPath, key, lhs, rhs);\n\t\t\t\t\tif (alt)\n\t\t\t\t\t{\n\t\t\t\t\t\tlhs = alt[0];\n\t\t\t\t\t\trhs = alt[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcurrentPath.push(key);\n\t}\n\n\t// Use string comparison for regexes\n\tif (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp')\n\t{\n\t\tlhs = lhs.toString();\n\t\trhs = rhs.toString();\n\t}\n\n\tconst ltype = typeof lhs;\n\tconst rtype = typeof rhs;\n\tlet i, j, k, other;\n\n\tconst ldefined = ltype !== 'undefined' ||\n\t\t(stack && (stack.length > 0) && stack[stack.length - 1].lhs &&\n\t\t\tObject.getOwnPropertyDescriptor(stack[stack.length - 1].lhs, key));\n\tconst rdefined = rtype !== 'undefined' ||\n\t\t(stack && (stack.length > 0) && stack[stack.length - 1].rhs &&\n\t\t\tObject.getOwnPropertyDescriptor(stack[stack.length - 1].rhs, key));\n\n\tif (!ldefined && rdefined)\n\t{\n\t\tchanges.push(new DiffNew(currentPath, rhs));\n\t}\n\telse if (!rdefined && ldefined)\n\t{\n\t\tchanges.push(new DiffDeleted(currentPath, lhs));\n\t}\n\telse if (realTypeOf(lhs) !== realTypeOf(rhs))\n\t{\n\t\tchanges.push(new DiffEdit(currentPath, lhs, rhs));\n\t}\n\telse if (realTypeOf(lhs) === 'date' && (lhs - rhs) !== 0)\n\t{\n\t\tchanges.push(new DiffEdit(currentPath, lhs, rhs));\n\t}\n\telse if (ltype === 'object' && lhs !== null && rhs !== null)\n\t{\n\t\tfor (i = stack.length - 1; i > -1; --i)\n\t\t{\n\t\t\tif (stack[i].lhs === lhs)\n\t\t\t{\n\t\t\t\tother = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!other)\n\t\t{\n\t\t\tstack.push({ lhs: lhs, rhs: rhs });\n\t\t\tif (Array.isArray(lhs))\n\t\t\t{\n\t\t\t\t// If order doesn't matter, we need to sort our arrays\n\t\t\t\tif (orderIndependent)\n\t\t\t\t{\n\t\t\t\t\tlhs.sort(function (a, b)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn getOrderIndependentHash(a) - getOrderIndependentHash(b);\n\t\t\t\t\t});\n\n\t\t\t\t\trhs.sort(function (a, b)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn getOrderIndependentHash(a) - getOrderIndependentHash(b);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\ti = rhs.length - 1;\n\t\t\t\tj = lhs.length - 1;\n\t\t\t\twhile (i > j)\n\t\t\t\t{\n\t\t\t\t\tchanges.push(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i--])));\n\t\t\t\t}\n\t\t\t\twhile (j > i)\n\t\t\t\t{\n\t\t\t\t\tchanges.push(new DiffArray(currentPath, j, new DiffDeleted(undefined, lhs[j--])));\n\t\t\t\t}\n\t\t\t\tfor (; i >= 0; --i)\n\t\t\t\t{\n\t\t\t\t\t_deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack, orderIndependent);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar akeys = Object.keys(lhs).concat(Object.getOwnPropertySymbols(lhs));\n\t\t\t\tvar pkeys = Object.keys(rhs).concat(Object.getOwnPropertySymbols(rhs));\n\t\t\t\tfor (i = 0; i < akeys.length; ++i)\n\t\t\t\t{\n\t\t\t\t\tk = akeys[i];\n\t\t\t\t\tother = pkeys.indexOf(k);\n\t\t\t\t\tif (other >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t_deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack, orderIndependent);\n\t\t\t\t\t\tpkeys[other] = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack, orderIndependent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < pkeys.length; ++i)\n\t\t\t\t{\n\t\t\t\t\tk = pkeys[i];\n\t\t\t\t\tif (k)\n\t\t\t\t\t{\n\t\t\t\t\t\t_deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack, orderIndependent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tstack.length = stack.length - 1;\n\t\t}\n\t\telse if (lhs !== rhs)\n\t\t{\n\t\t\t// lhs is contains a cycle at this element and it differs from rhs\n\t\t\tchanges.push(new DiffEdit(currentPath, lhs, rhs));\n\t\t}\n\t}\n\telse if (lhs !== rhs)\n\t{\n\t\tif (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs)))\n\t\t{\n\t\t\tchanges.push(new DiffEdit(currentPath, lhs, rhs));\n\t\t}\n\t}\n}\n\nexport function observableDiff<LHS, RHS = LHS>(lhs: LHS, rhs: RHS, observer?: Observer<LHS, RHS>, prefilter?: PreFilter<LHS, RHS>, orderIndependent?: boolean)\n{\n\tconst changes: IDiffNode[] = [];\n\t_deepDiff(lhs, rhs, changes, prefilter, null, null, null, orderIndependent);\n\tif (observer)\n\t{\n\t\tfor (let i = 0; i < changes.length; ++i)\n\t\t{\n\t\t\tobserver(changes[i]);\n\t\t}\n\t}\n\treturn changes;\n}\n\nexport function orderIndependentObservableDiff(lhs, rhs, changes, prefilter, path, key, stack)\n{\n\treturn _deepDiff(lhs, rhs, changes, prefilter, path, key, stack, true);\n}\n\nexport function deepDiff<LHS, RHS = LHS>(lhs: LHS, rhs: RHS, prefilter?: PreFilter<LHS, RHS>, accum?: IDiffNode<LHS, RHS>[]): IDiffNode<LHS, RHS>[]\n{\n\tconst observer = (accum) ?\n\t\tfunction (difference: IDiffNode)\n\t\t{\n\t\t\tif (difference)\n\t\t\t{\n\t\t\t\taccum!.push(difference);\n\t\t\t}\n\t\t} : undefined;\n\tconst changes = observableDiff(lhs, rhs, observer, prefilter);\n\treturn (accum) ? accum : (changes.length) ? changes : undefined;\n}\n\nexport function orderIndependentDiff<LHS, RHS = LHS>(lhs: LHS, rhs: RHS, prefilter?: PreFilter<LHS, RHS>, accum?: IDiffNode<LHS, RHS>[])\n{\n\tconst observer = (accum) ?\n\t\tfunction (difference: IDiffNode<LHS, RHS>)\n\t\t{\n\t\t\tif (difference)\n\t\t\t{\n\t\t\t\taccum!.push(difference);\n\t\t\t}\n\t\t} : undefined;\n\tconst changes = observableDiff(lhs, rhs, observer, prefilter, true);\n\treturn (accum) ? accum : (changes.length) ? changes : undefined;\n}\n\nfunction _traversalObject<T>(target: any, path: IPaths)\n{\n\tpath = path.slice();\n\n\tconst key = path.pop();\n\n\tlet it: T = target;\n\n\tpath.reduce((target, key) => {\n\t\treturn it = target[key]\n\t}, it);\n\n\treturn [it, key] as const\n}\n\nfunction _applyArrayChange<T extends any[]>(arr: T, index: number, change: IDiffNode)\n{\n\tif (change.path?.length)\n\t{\n//\t\tlet it = arr[index],\n//\t\t\ti, u = change.path.length - 1;\n//\t\tfor (i = 0; i < u; i++)\n//\t\t{\n//\t\t\tit = it[change.path[i]];\n//\t\t}\n//\n//\t\tlet key = change.path[i];\n\n\t\tlet [it, key] = _traversalObject(arr[index], change.path);\n\n\t\tswitch (change.kind)\n\t\t{\n\t\t\tcase 'A':\n\t\t\t\t_applyArrayChange(it[key], change.index, change.item);\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tdelete it[key];\n\t\t\t\tbreak;\n\t\t\tcase 'E':\n\t\t\tcase 'N':\n\t\t\t\tit[key] = change.rhs;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\telse\n\t{\n\t\tswitch (change.kind)\n\t\t{\n\t\t\tcase 'A':\n\t\t\t\t_applyArrayChange(arr[index], change.index, change.item);\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tarr = arrayRemove(arr, index);\n\t\t\t\tbreak;\n\t\t\tcase 'E':\n\t\t\tcase 'N':\n\t\t\t\tarr[index] = change.rhs;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn arr;\n}\n\nexport function isIDiffNode<T extends IDiffNode>(source?: unknown): source is T\n{\n\treturn (source ?? false) && validKinds.includes(source.kind)\n}\n\nexport function applyChange<LHS>(target: LHS, source: any, change: IDiffNode<LHS, any>)\n{\n\tif (typeof change === 'undefined' && isIDiffNode(source))\n\t{\n\t\tchange = source;\n\t}\n\tif (target && change && change.kind)\n\t{\n\t\tlet it = target,\n\t\t\ti = -1,\n\t\t\tlast = change.path ? change.path.length - 1 : 0;\n\t\twhile (++i < last)\n\t\t{\n\t\t\tif (typeof it[change.path[i]] === 'undefined')\n\t\t\t{\n\t\t\t\tit[change.path[i]] = (typeof change.path[i + 1] !== 'undefined' && typeof change.path[i + 1] === 'number')\n\t\t\t\t\t? []\n\t\t\t\t\t: {};\n\t\t\t}\n\t\t\tit = it[change.path[i]];\n\t\t}\n\t\tswitch (change.kind)\n\t\t{\n\t\t\tcase 'A':\n\t\t\t\tif (change.path && typeof it[change.path[i]] === 'undefined')\n\t\t\t\t{\n\t\t\t\t\tit[change.path[i]] = [];\n\t\t\t\t}\n\t\t\t\t_applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tdelete it[change.path[i]];\n\t\t\t\tbreak;\n\t\t\tcase 'E':\n\t\t\tcase 'N':\n\t\t\t\tit[change.path[i]] = change.rhs;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction revertArrayChange<T extends any[]>(arr: T, index: number, change: IDiffNode)\n{\n\tif (change.path && change.path.length)\n\t{\n\t\t// the structure of the object at the index has changed...\n\t\tlet it = arr[index],\n\t\t\ti, u = change.path.length - 1;\n\t\tfor (i = 0; i < u; i++)\n\t\t{\n\t\t\tit = it[change.path[i]];\n\t\t}\n\t\tswitch (change.kind)\n\t\t{\n\t\t\tcase EnumKinds.DiffArray:\n\t\t\t\trevertArrayChange(it[change.path[i]], change.index, change.item);\n\t\t\t\tbreak;\n\t\t\tcase EnumKinds.DiffDeleted:\n\t\t\t\tit[change.path[i]] = change.lhs;\n\t\t\t\tbreak;\n\t\t\tcase EnumKinds.DiffEdit:\n\t\t\t\tit[change.path[i]] = change.lhs;\n\t\t\t\tbreak;\n\t\t\tcase EnumKinds.DiffNew:\n\t\t\t\tdelete it[change.path[i]];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\telse\n\t{\n\t\t// the array item is different...\n\t\tswitch (change.kind)\n\t\t{\n\t\t\tcase EnumKinds.DiffArray:\n\t\t\t\trevertArrayChange(arr[index], change.index, change.item);\n\t\t\t\tbreak;\n\t\t\tcase EnumKinds.DiffDeleted:\n\t\t\t\tarr[index] = change.lhs;\n\t\t\t\tbreak;\n\t\t\tcase EnumKinds.DiffEdit:\n\t\t\t\tarr[index] = change.lhs;\n\t\t\t\tbreak;\n\t\t\tcase EnumKinds.DiffNew:\n\t\t\t\tarr = arrayRemove(arr, index);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn arr;\n}\n\nexport function revertChange<LHS>(target: LHS, source: any, change: IDiffNode)\n{\n\tif (target && source && change?.kind)\n\t{\n\t\tlet it = target,\n\t\t\ti, u;\n\t\tu = change.path.length - 1;\n\t\tfor (i = 0; i < u; i++)\n\t\t{\n\t\t\tif (typeof it[change.path[i]] === 'undefined')\n\t\t\t{\n\t\t\t\tit[change.path[i]] = {};\n\t\t\t}\n\t\t\tit = it[change.path[i]];\n\t\t}\n\t\tswitch (change.kind)\n\t\t{\n\t\t\tcase EnumKinds.DiffArray:\n\t\t\t\t// Array was modified...\n\t\t\t\t// it will be an array...\n\t\t\t\trevertArrayChange(it[change.path[i]], change.index, change.item);\n\t\t\t\tbreak;\n\t\t\tcase EnumKinds.DiffDeleted:\n\t\t\t\t// Item was deleted...\n\t\t\t\tit[change.path[i]] = change.lhs;\n\t\t\t\tbreak;\n\t\t\tcase EnumKinds.DiffEdit:\n\t\t\t\t// Item was edited...\n\t\t\t\tit[change.path[i]] = change.lhs;\n\t\t\t\tbreak;\n\t\t\tcase EnumKinds.DiffNew:\n\t\t\t\t// Item is new...\n\t\t\t\tdelete it[change.path[i]];\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport function applyDiff<LHS, RHS = LHS>(target: LHS, source: RHS, filter?: Filter<LHS, RHS>)\n{\n\tif (target && source)\n\t{\n\t\tconst onChange = function (change: IDiffNode<LHS, RHS>)\n\t\t{\n\t\t\tif (!filter || filter(target, source, change))\n\t\t\t{\n\t\t\t\tapplyChange(target, source, change);\n\t\t\t}\n\t\t};\n\t\tobservableDiff(target, source, onChange);\n\t}\n\treturn target\n}\n\nfunction _applyDiffChangeCore<T>(lhs: unknown, differences: IDiffNode<any, any>[], fn: (lhs: any, source: true, it: IDiffNode<any, any>) => any): lhs is T\n{\n\tdifferences.forEach((it) => {\n\t\tfn(lhs, true, it);\n\t});\n\n\treturn true;\n}\n\nexport function applyDiffChange<RHS>(lhs: unknown, differences: IDiffNode<any, RHS>[]): RHS\n{\n\tif (_applyDiffChangeCore<RHS>(lhs, differences, applyChange))\n\t{\n\t\treturn lhs\n\t}\n}\n\nexport function revertDiffChange<LHS>(lhs: unknown, differences: IDiffNode<LHS, any>[]): LHS\n{\n\tif (_applyDiffChangeCore<LHS>(lhs, differences, revertChange))\n\t{\n\t\treturn lhs\n\t}\n}\n\nexport { deepDiff as diff }\n\nexport default deepDiff;\n\n"],"names":["EnumKinds","validKinds","Diff","constructor","kind","path","length","DiffEdit","lhs","rhs","DiffNew","DiffDeleted","DiffArray","index","item","arrayRemove","arr","from","splice","realTypeOf","subject","type","Math","Array","isArray","Object","prototype","toString","call","test","hashThisString","string","hash","i","charCodeAt","getOrderIndependentHash","object","accum","forEach","arrayString","normalizeHashDesc","key","hasOwnProperty","keyValueString","stringToHash","value","options","_deepDiff","changes","prefilter","stack","orderIndependent","currentPath","slice","normalize","alt","push","ltype","rtype","j","k","other","ldefined","getOwnPropertyDescriptor","rdefined","sort","a","b","undefined","akeys","keys","concat","getOwnPropertySymbols","pkeys","indexOf","isNaN","observableDiff","observer","deepDiff","difference","_applyArrayChange","change","_change$path","it","target","pop","reduce","_traversalObject","isIDiffNode","source","includes","applyChange","last","revertArrayChange","u","revertChange","_applyDiffChangeCore","differences","fn","filter"],"mappings":"aAEA,IAAkBA,yDAAAA,0BAAAA,EAAAA,oBAAAA,oCASjBA,cAIAA,kBAIAA,gBAGD,MAAMC,EAAa,wBAmBGC,EAIrBC,YAA6BC,EAAiBC,aAAjBD,QAExBC,GAAAA,EAAMC,cAEJD,KAAOA,UAQFE,UAAiCL,EAI7CC,YAAYE,EAAqBG,EAAiBC,aAEvBJ,YAFMG,WAAiBC,SAStCC,UAAqBR,EAIjCC,YAAYE,EAAqBI,aAEPJ,YAFOI,SASrBE,UAAyBT,EAIrCC,YAAYE,EAAqBG,aAEHH,YAFGG,SASrBI,UAAkCV,EAI9CC,YAAYE,EAAqBQ,EAAsBC,aAE3BT,cAFKQ,YAAsBC,GAMxD,SAASC,EAA6BC,EAAQC,UAEtCD,EAAIE,OAAOD,EAAM,GAQzB,SAASE,EAAWC,SAEbC,SAAcD,QACP,WAATC,EAEIA,EAGJD,IAAYE,KAER,OAEa,OAAZF,EAED,OAECG,MAAMC,QAAQJ,GAEf,QAE6C,kBAA5CK,OAAOC,UAAUC,SAASC,KAAKR,GAEhC,OAE6B,mBAArBA,EAAQO,UAA2B,UAAUE,KAAKT,EAAQO,YAElE,SAED,SAMR,SAASG,EAAeC,OAEnBC,EAAO,KACW,IAAlBD,EAAOzB,cACF0B,MACJ,IAAIC,EAAI,EAAGA,EAAIF,EAAOzB,OAAQ2B,IAGlCD,GAASA,GAAQ,GAAKA,EADTD,EAAOG,WAAWD,GAE/BD,GAAcA,SAERA,WAOQG,EAAwBC,OAEnCC,EAAQ,QACNhB,EAAOF,EAAWiB,MAEX,UAATf,EACJ,CACCe,EAAOE,SAAQ,SAAUxB,GAGxBuB,GAASF,EAAwBrB,YAG5ByB,EAAcC,EAAkBnB,EAAM,CAC3CW,KAAMK,WAGAA,EAAQP,EAAeS,GAE1B,GAAa,WAATlB,EACT,KACM,MAAMoB,KAAOL,KAEbA,EAAOM,eAAeD,GAC1B,OACOE,EAAiBH,EAAkBnB,EAAM,CAC9CoB,IAAAA,EACAT,KAAMG,EAAwBC,EAAOK,MAGtCJ,GAASP,EAAea,UAInBN,QAIFO,EAAeJ,EAAkBnB,EAAM,CAC5CwB,MAAOT,WAGDC,EAAQP,EAAec,GAG/B,SAASJ,EAAkBnB,EAAqCyB,UAMvDzB,OAEF,yBACcA,aAAgByB,EAAQd,YACtC,0BACcX,WAAcyB,EAAQL,eAAeK,EAAQd,iCAE7CX,cAAiByB,EAAQD,UAI9C,SAASE,EAAUvC,EAAKC,EAAKuC,EAAsBC,EAAW5C,EAAcoC,EAAKS,EAAOC,GAEvFH,EAAUA,GAAW,GAErBE,EAAQA,GAAS,SACXE,GAFN/C,EAAOA,GAAQ,IAEUgD,MAAM,MAC3B,MAAOZ,EACX,IACKQ,EACJ,IAC4B,mBAAfA,GAA6BA,EAAUG,EAAaX,UAI3D,GAA2B,iBAAfQ,EACjB,IACKA,EAAUA,WAAaA,EAAUA,UAAUG,EAAaX,aAIxDQ,EAAUK,UACd,KACKC,EAAMN,EAAUK,UAAUF,EAAaX,EAAKjC,EAAKC,GACjD8C,IAEH/C,EAAM+C,EAAI,GACV9C,EAAM8C,EAAI,MAKdH,EAAYI,KAAKf,GAIM,WAApBtB,EAAWX,IAAyC,WAApBW,EAAWV,KAE9CD,EAAMA,EAAImB,WACVlB,EAAMA,EAAIkB,kBAGL8B,SAAejD,EACfkD,SAAejD,MACjBwB,EAAG0B,EAAGC,EAAGC,QAEPC,EAAqB,cAAVL,GACfP,GAAUA,EAAM5C,OAAS,GAAM4C,EAAMA,EAAM5C,OAAS,GAAGE,KACvDiB,OAAOsC,yBAAyBb,EAAMA,EAAM5C,OAAS,GAAGE,IAAKiC,GACzDuB,EAAqB,cAAVN,GACfR,GAAUA,EAAM5C,OAAS,GAAM4C,EAAMA,EAAM5C,OAAS,GAAGG,KACvDgB,OAAOsC,yBAAyBb,EAAMA,EAAM5C,OAAS,GAAGG,IAAKgC,OAE1DqB,GAAYE,EAEhBhB,EAAQQ,KAAK,IAAI9C,EAAQ0C,EAAa3C,SAElC,IAAKuD,GAAYF,EAErBd,EAAQQ,KAAK,IAAI7C,EAAYyC,EAAa5C,SAEtC,GAAIW,EAAWX,KAASW,EAAWV,GAEvCuC,EAAQQ,KAAK,IAAIjD,EAAS6C,EAAa5C,EAAKC,SAExC,GAAwB,SAApBU,EAAWX,IAAoBA,EAAMC,GAAS,EAEtDuC,EAAQQ,KAAK,IAAIjD,EAAS6C,EAAa5C,EAAKC,SAExC,GAAc,WAAVgD,GAA8B,OAARjD,GAAwB,OAARC,EAC/C,KACMwB,EAAIiB,EAAM5C,OAAS,EAAG2B,GAAK,IAAKA,KAEhCiB,EAAMjB,GAAGzB,MAAQA,EACrB,CACCqD,GAAQ,WAILA,EA8DIrD,IAAQC,GAGhBuC,EAAQQ,KAAK,IAAIjD,EAAS6C,EAAa5C,EAAKC,QAhE7C,IACCyC,EAAMM,KAAK,CAAEhD,IAAKA,EAAKC,IAAKA,IACxBc,MAAMC,QAAQhB,GAClB,KAEK2C,IAEH3C,EAAIyD,MAAK,SAAUC,EAAGC,UAEdhC,EAAwB+B,GAAK/B,EAAwBgC,MAG7D1D,EAAIwD,MAAK,SAAUC,EAAGC,UAEdhC,EAAwB+B,GAAK/B,EAAwBgC,OAG9DlC,EAAIxB,EAAIH,OAAS,EACjBqD,EAAInD,EAAIF,OAAS,EACV2B,EAAI0B,GAEVX,EAAQQ,KAAK,IAAI5C,EAAUwC,EAAanB,EAAG,IAAIvB,OAAQ0D,EAAW3D,EAAIwB,aAEhE0B,EAAI1B,GAEVe,EAAQQ,KAAK,IAAI5C,EAAUwC,EAAaO,EAAG,IAAIhD,OAAYyD,EAAW5D,EAAImD,aAEpE1B,GAAK,IAAKA,EAEhBc,EAAUvC,EAAIyB,GAAIxB,EAAIwB,GAAIe,EAASC,EAAWG,EAAanB,EAAGiB,EAAOC,OAIvE,KACKkB,EAAQ5C,OAAO6C,KAAK9D,GAAK+D,OAAO9C,OAAO+C,sBAAsBhE,IAC7DiE,EAAQhD,OAAO6C,KAAK7D,GAAK8D,OAAO9C,OAAO+C,sBAAsB/D,QAC5DwB,EAAI,EAAGA,EAAIoC,EAAM/D,SAAU2B,EAE/B2B,EAAIS,EAAMpC,GACV4B,EAAQY,EAAMC,QAAQd,GAClBC,GAAS,GAEZd,EAAUvC,EAAIoD,GAAInD,EAAImD,GAAIZ,EAASC,EAAWG,EAAaQ,EAAGV,EAAOC,GACrEsB,EAAMZ,GAAS,MAIfd,EAAUvC,EAAIoD,QAAIQ,EAAWpB,EAASC,EAAWG,EAAaQ,EAAGV,EAAOC,OAGrElB,EAAI,EAAGA,EAAIwC,EAAMnE,SAAU2B,EAE/B2B,EAAIa,EAAMxC,GACN2B,GAEHb,OAAUqB,EAAW3D,EAAImD,GAAIZ,EAASC,EAAWG,EAAaQ,EAAGV,EAAOC,GAI3ED,EAAM5C,OAAS4C,EAAM5C,OAAS,QAQvBE,IAAQC,IAEA,WAAVgD,GAAsBkB,MAAMnE,IAAQmE,MAAMlE,IAE/CuC,EAAQQ,KAAK,IAAIjD,EAAS6C,EAAa5C,EAAKC,cAK/BmE,EAA+BpE,EAAUC,EAAUoE,EAA+B5B,EAAiCE,SAE5HH,EAAuB,MAC7BD,EAAUvC,EAAKC,EAAKuC,EAASC,EAAW,KAAM,KAAM,KAAME,GACtD0B,MAEE,IAAI5C,EAAI,EAAGA,EAAIe,EAAQ1C,SAAU2B,EAErC4C,EAAS7B,EAAQf,WAGZe,WAQQ8B,EAAyBtE,EAAUC,EAAUwC,EAAiCZ,SAUvFW,EAAU4B,EAAepE,EAAKC,EARlB4B,EACjB,SAAU0C,GAELA,GAEH1C,EAAOmB,KAAKuB,SAEVX,EAC8CnB,UAC3CZ,IAAkBW,EAAQ1C,OAAU0C,OAAUoB,GAgCvD,SAASY,EAAmChE,EAAQH,EAAeoE,qBAE9DA,EAAO5E,OAAP6E,EAAa5E,OACjB,KAUM6E,EAAI1C,GA5BX,SAA6B2C,EAAa/E,SAInCoC,GAFNpC,EAAOA,EAAKgD,SAEKgC,UAEbF,EAAQC,SAEZ/E,EAAKiF,QAAO,CAACF,EAAQ3C,IACb0C,EAAKC,EAAO3C,IACjB0C,GAEI,CAACA,EAAI1C,GAgBK8C,CAAiBvE,EAAIH,GAAQoE,EAAO5E,aAE5C4E,EAAO7E,UAET,IACJ4E,EAAkBG,EAAG1C,GAAMwC,EAAOpE,MAAOoE,EAAOnE,gBAE5C,WACGqE,EAAG1C,aAEN,QACA,IACJ0C,EAAG1C,GAAOwC,EAAOxE,iBAMXwE,EAAO7E,UAET,IACJ4E,EAAkBhE,EAAIH,GAAQoE,EAAOpE,MAAOoE,EAAOnE,gBAE/C,IACJE,EAAMD,EAAYC,EAAKH,aAEnB,QACA,IACJG,EAAIH,GAASoE,EAAOxE,WAIhBO,WAGQwE,EAAiCC,gBAExCA,GAAAA,GAAoBxF,EAAWyF,SAASD,EAAOrF,eAGxCuF,EAAiBP,EAAaK,EAAaR,WAEpC,IAAXA,GAA0BO,EAAYC,KAEhDR,EAASQ,GAENL,GAAUH,GAAUA,EAAO7E,KAC/B,KACK+E,EAAKC,EACRnD,GAAK,EACL2D,EAAOX,EAAO5E,KAAO4E,EAAO5E,KAAKC,OAAS,EAAI,SACtC2B,EAAI2D,QAEsB,IAAvBT,EAAGF,EAAO5E,KAAK4B,MAEzBkD,EAAGF,EAAO5E,KAAK4B,SAAqC,IAAvBgD,EAAO5E,KAAK4B,EAAI,IAAoD,iBAAvBgD,EAAO5E,KAAK4B,EAAI,GACvF,GACA,IAEJkD,EAAKA,EAAGF,EAAO5E,KAAK4B,WAEbgD,EAAO7E,UAET,IACA6E,EAAO5E,WAAsC,IAAvB8E,EAAGF,EAAO5E,KAAK4B,MAExCkD,EAAGF,EAAO5E,KAAK4B,IAAM,IAEtB+C,EAAkBC,EAAO5E,KAAO8E,EAAGF,EAAO5E,KAAK4B,IAAMkD,EAAIF,EAAOpE,MAAOoE,EAAOnE,gBAE1E,WACGqE,EAAGF,EAAO5E,KAAK4B,cAElB,QACA,IACJkD,EAAGF,EAAO5E,KAAK4B,IAAMgD,EAAOxE,MAMhC,SAASoF,EAAmC7E,EAAQH,EAAeoE,MAE9DA,EAAO5E,MAAQ4E,EAAO5E,KAAKC,OAC/B,KAGE2B,EADGkD,EAAKnE,EAAIH,GACTiF,EAAIb,EAAO5E,KAAKC,OAAS,MACxB2B,EAAI,EAAGA,EAAI6D,EAAG7D,IAElBkD,EAAKA,EAAGF,EAAO5E,KAAK4B,WAEbgD,EAAO7E,cAGbyF,EAAkBV,EAAGF,EAAO5E,KAAK4B,IAAKgD,EAAOpE,MAAOoE,EAAOnE,4BAM3DqE,EAAGF,EAAO5E,KAAK4B,IAAMgD,EAAOzE,yBAGrB2E,EAAGF,EAAO5E,KAAK4B,iBAOhBgD,EAAO7E,cAGbyF,EAAkB7E,EAAIH,GAAQoE,EAAOpE,MAAOoE,EAAOnE,4BAMnDE,EAAIH,GAASoE,EAAOzE,kBAGpBQ,EAAMD,EAAYC,EAAKH,UAInBG,WAGQ+E,EAAkBX,EAAaK,EAAaR,MAEvDG,GAAUK,SAAUR,GAAAA,EAAQ7E,KAChC,KAEE6B,EAAG6D,EADAX,EAAKC,MAETU,EAAIb,EAAO5E,KAAKC,OAAS,EACpB2B,EAAI,EAAGA,EAAI6D,EAAG7D,SAEgB,IAAvBkD,EAAGF,EAAO5E,KAAK4B,MAEzBkD,EAAGF,EAAO5E,KAAK4B,IAAM,IAEtBkD,EAAKA,EAAGF,EAAO5E,KAAK4B,WAEbgD,EAAO7E,cAKbyF,EAAkBV,EAAGF,EAAO5E,KAAK4B,IAAKgD,EAAOpE,MAAOoE,EAAOnE,4BAQ3DqE,EAAGF,EAAO5E,KAAK4B,IAAMgD,EAAOzE,yBAIrB2E,EAAGF,EAAO5E,KAAK4B,MAsB1B,SAAS+D,EAAwBxF,EAAcyF,EAAoCC,UAElFD,EAAY3D,SAAS6C,IACpBe,EAAG1F,GAAK,EAAM2E,OAGR,iJAtBkCC,EAAaK,EAAaU,UAE/Df,GAAUK,GASbb,EAAeQ,EAAQK,GAPN,SAAUR,GAErBkB,IAAUA,EAAOf,EAAQK,EAAQR,IAErCU,EAAYP,EAAQK,EAAQR,MAKxBG,oCAY6B5E,EAAcyF,MAE9CD,EAA0BxF,EAAKyF,EAAaN,UAExCnF,8KA/O4CA,EAAUC,EAAUwC,EAAiCZ,SAUnGW,EAAU4B,EAAepE,EAAKC,EARlB4B,EACjB,SAAU0C,GAELA,GAEH1C,EAAOmB,KAAKuB,SAEVX,EAC8CnB,GAAW,UACtDZ,IAAkBW,EAAQ1C,OAAU0C,OAAUoB,oDA9BR5D,EAAKC,EAAKuC,EAASC,EAAW5C,EAAMoC,EAAKS,UAEhFH,EAAUvC,EAAKC,EAAKuC,EAASC,EAAW5C,EAAMoC,EAAKS,GAAO,6DAoQ5B1C,EAAcyF,MAE/CD,EAA0BxF,EAAKyF,EAAaF,UAExCvF"}